{"version":3,"sources":["Sqft.js","cubicfeet.js","Squaremeter.js","cubicMeter.js","App.js","reportWebVitals.js","index.js"],"names":["SqFt","useState","d","BrickCount","setCount","styleOnText2","color","fontWeight","fontSize","onSubmit","e","preventDefault","style","width","height","type","placeholder","onChange","brickWorkArea","target","value","NoOfBrick","Math","floor","newNoOfBrick","addFivePercente","result","CubicFeet","noOfBrick","addFivePercent","SquareMeter","areaOfBrick","newnoOfBrick","CubicMeter","App","isPreviewShown1","setPreviewShown1","isPreviewShown2","setPreviewShown2","isPreviewShown3","setPreviewShown3","isPreviewShown4","setPreviewShown4","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38aa5169.chunk.js","sourcesContent":["import React, {  useState } from 'react';\r\n\r\nconst  SqFt = () =>{\r\n    const [BrickCount, setCount] = useState({d : 0});\r\n\r\n  function calculateSqFt(e){\r\n    e.preventDefault();\r\n    let brickWorkArea = e.target.value; //Indian brick size = 9″ × 3″ ×4.5″\r\n    \r\n    let areaOfBrickInSqFt = 0.1875;   //Multiplication length of brick = 9″ = 0.75 feet & Depth of brick = 3″ = 0.25 feet \r\n    let NoOfBrick = Math.floor(brickWorkArea / areaOfBrickInSqFt);\r\n    \r\n    let minusTenPercente = NoOfBrick / 10;  //10% space cover by mortar deduct this value in number of bricks\r\n    \r\n    let newNoOfBrick = NoOfBrick - minusTenPercente;\r\n    \r\n\r\n    let addFivePercente = NoOfBrick / 5;  //5% wastage of bricks\r\n  \r\n    let result = Math.floor(newNoOfBrick + addFivePercente);\r\n    \r\n    setCount({\r\n      d:result\r\n    })   \r\n  }\r\n\r\n  function inputHandler(e){\r\n    e.preventDefault();\r\n  }\r\n\r\n  const styleOnText = {\r\n    color: \"white\",\r\n    fontWeight : \"bold\",\r\n    fontSize : \"30px\"\r\n  }\r\n\r\n  const styleOnText2 ={\r\n    color : \"white\",\r\n    fontWeight : \"bold\",\r\n    fontSize : \"20px\"\r\n  }\r\n\r\n  const styleOnInput = {\r\n    width : \"300px\",\r\n    height : \"40px\"\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <form  onSubmit={inputHandler}>\r\n        <label style={styleOnText}>Enter your work area (Square feet)</label><br/><br/>\r\n        <input style={styleOnInput} type=\"number\" placeholder=\"Enter brick work area\" onChange={calculateSqFt}/>\r\n        \r\n      </form>  <br/><br/>\r\n      <label style={styleOnText2}>Required Brick Count per Square feet</label>\r\n      <h3 style={styleOnText2}>{BrickCount.d}</h3>\r\n\r\n    </div>\r\n      \r\n    \r\n  );\r\n}\r\n\r\nexport default SqFt;","import React, {  useState } from 'react';\r\n\r\n\r\nconst CubicFeet = () =>{\r\n    const [BrickCount, setCount] = useState({d : 0});\r\n\r\n    function calculateCubicFt(e){\r\n        e.preventDefault();\r\n        let brickWorkArea = e.target.value; //user given value\r\n\r\n        let volumeOfbrick = 0.0703  //Volume of 1 brick = 9″×3″ × 4.5″= 121.4 cubic inch &  then Volume of brick in Cu ft = 0.75′ × 0.25′ × 0.375′ = 0.0703\r\n\r\n        let noOfBrick = brickWorkArea / volumeOfbrick;\r\n\r\n        //consider 10% space cover by mortar so deduct that\r\n        let minusTenPercente = noOfBrick /10;\r\n\r\n        let newNoOfBrick =  noOfBrick - minusTenPercente; //new no of brick\r\n\r\n        //add 5% wastage of brick \r\n        let addFivePercent = noOfBrick / 5;\r\n        let result = Math.floor(newNoOfBrick + addFivePercent);\r\n\r\n        setCount({\r\n            d : result\r\n        })\r\n    }\r\n\r\n\r\n\r\n    function inputHandler(e){\r\n        e.preventDefault();\r\n    }\r\n\r\n    const styleOnText = {\r\n        color: \"white\",\r\n        fontWeight : \"bold\",\r\n        fontSize : \"30px\"\r\n      }\r\n    \r\n      const styleOnText2 ={\r\n        color : \"white\",\r\n        fontWeight : \"bold\",\r\n        fontSize : \"20px\"\r\n      }\r\n    \r\n      const styleOnInput = {\r\n        width : \"300px\",\r\n        height : \"40px\"\r\n      }\r\n    return(\r\n        <div>\r\n        <form  onSubmit={inputHandler}>\r\n            <label style={styleOnText}>Enter your work area (cubic feet)</label><br/><br/>\r\n            <input style={styleOnInput} type=\"number\" placeholder=\"Enter brick work area\" onChange={calculateCubicFt}/>\r\n        </form> <br/><br/>\r\n      <label style={styleOnText2}>Required Brick Count per Cubic feet</label>\r\n      <h3 style={styleOnText2}>{BrickCount.d}</h3>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CubicFeet;","import React, {  useState } from 'react';\r\n\r\n\r\nconst SquareMeter = () =>{\r\n    const [BrickCount, setCount] = useState({d : 0});\r\n\r\n    function calculateSqMeter(e){\r\n        e.preventDefault();\r\n        \r\n        let brickWorkArea = e.target.value; //given by user\r\n\r\n        let areaOfBrick = 0.01725;  //area of one brick in sq m\r\n\r\n        let noOfBrick = Math.floor(brickWorkArea / areaOfBrick);    \r\n\r\n        //consider 10% space cover by mortar so deduct that\r\n\r\n        let minusTenPercent = Math.floor(areaOfBrick / 10);\r\n        let newnoOfBrick = noOfBrick - minusTenPercent;\r\n\r\n        //5% wastage of brick so add that\r\n\r\n        let addFivePercent = Math.floor(areaOfBrick / 5);\r\n\r\n        let result = Math.floor(newnoOfBrick + addFivePercent);\r\n\r\n        setCount({\r\n            d : result\r\n        })\r\n\r\n    }\r\n\r\n\r\n    function inputHandler(e){\r\n        e.preventDefault();\r\n    }\r\n\r\n    const styleOnText = {\r\n        color: \"white\",\r\n        fontWeight : \"bold\",\r\n        fontSize : \"30px\"\r\n      }\r\n    \r\n      const styleOnText2 ={\r\n        color : \"white\",\r\n        fontWeight : \"bold\",\r\n        fontSize : \"20px\"\r\n      }\r\n    \r\n      const styleOnInput = {\r\n        width : \"300px\",\r\n        height : \"40px\"\r\n      }\r\n\r\n    return(\r\n        <div>\r\n        <form  onSubmit={inputHandler}>\r\n            <label style={styleOnText}>Enter your work area (Square Meter)</label><br/><br/>\r\n            <input style={styleOnInput} type=\"number\" placeholder=\"Enter brick work area\" onChange={calculateSqMeter}/>\r\n        </form> <br/><br/>\r\n      <label style={styleOnText2}>Required Brick Count per Square Meter</label>\r\n      <h3 style={styleOnText2}>{BrickCount.d}</h3>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default SquareMeter;","import React, {  useState } from 'react';\r\n\r\nconst CubicMeter = () =>{\r\n\r\n    const [BrickCount, setCount] = useState({d : 0});\r\n\r\n    function calculateCubicMeter(e){\r\n        e.preventDefault();\r\n\r\n        let volumeOfbrickWork = e.target.value; //given by user\r\n\r\n        let volumeOfbrick = 0.00198 //in cubic meter\r\n\r\n        let noOfBrick = volumeOfbrickWork / volumeOfbrick;\r\n\r\n        //10% space cover by mortar so deduct that\r\n        let minusTenPercent =  noOfBrick / 10;\r\n        let newNoOfBrick = noOfBrick - minusTenPercent;\r\n\r\n        //consider 5% wastage of brick so add that\r\n        let addFivePercent =  noOfBrick / 5;\r\n        \r\n        let result  = Math.floor(newNoOfBrick + addFivePercent);\r\n\r\n        setCount({\r\n            d : result\r\n        })\r\n    }\r\n\r\n    function inputHandler(e){\r\n        e.preventDefault();\r\n    }\r\n\r\n    const styleOnText = {\r\n        color: \"white\",\r\n        fontWeight : \"bold\",\r\n        fontSize : \"30px\"\r\n      }\r\n    \r\n      const styleOnText2 ={\r\n        color : \"white\",\r\n        fontWeight : \"bold\",\r\n        fontSize : \"20px\"\r\n      }\r\n    \r\n      const styleOnInput = {\r\n        width : \"300px\",\r\n        height : \"40px\"\r\n      }\r\n    return(\r\n        <div>\r\n        <form  onSubmit={inputHandler}>\r\n            <label style={styleOnText}>Enter your work area (cubic meter)</label><br/><br/>\r\n            <input style={styleOnInput} type=\"number\" placeholder=\"Enter brick work area\" onChange={calculateCubicMeter}/>\r\n        </form> <br/><br/>\r\n        <label style={styleOnText2}>Required Brick Count per Cubic Meter</label>\r\n        <h3 style={styleOnText2}>{BrickCount.d}</h3>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CubicMeter;\r\n","import './App.css';\nimport React, {  useState } from 'react';\nimport SqFt from './Sqft';\nimport CubicFeet from './cubicfeet';\nimport SquareMeter from './Squaremeter';\nimport CubicMeter from './cubicMeter';\n\nfunction App() {\n\n  const [isPreviewShown1, setPreviewShown1] = useState(false);\n  const [isPreviewShown2, setPreviewShown2] = useState(false);\n  const [isPreviewShown3, setPreviewShown3] = useState(false);\n  const [isPreviewShown4, setPreviewShown4] = useState(false);\n\n\n  function SqFtHandler(e){\n    e.preventDefault();\n    setPreviewShown1(true);\n    setPreviewShown2(false);\n    setPreviewShown3(false);\n    setPreviewShown4(false);\n  }\n\n  function CubicFtHandler(e){\n    e.preventDefault();\n    setPreviewShown2(true);\n    setPreviewShown1(false);\n    setPreviewShown3(false);\n    setPreviewShown4(false);\n  }\n\n  function SqMeterHandler(e){\n    e.preventDefault();\n    setPreviewShown3(true);\n    setPreviewShown2(false);\n    setPreviewShown1(false);\n    setPreviewShown4(false);\n  }\n\n  function CubicMeterHandler(e){\n    e.preventDefault();\n    setPreviewShown1(false);\n    setPreviewShown2(false);\n    setPreviewShown3(false);\n    setPreviewShown4(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <h2 className=\"heading\">Brick Calculator</h2>\n      <button className=\"btn-style\" onClick={SqFtHandler}>Brick Calculation by SqFt</button>&nbsp;&nbsp;&nbsp;&nbsp;\n      \n      <button className=\"btn-style\" onClick={CubicFtHandler}>Brick Calculation by CubicFeet</button>&nbsp;&nbsp;&nbsp;&nbsp;\n      \n      <button className=\"btn-style\" onClick={CubicMeterHandler}>Brick Calculation by Cubic Meter</button>&nbsp;&nbsp;&nbsp;&nbsp;\n\n      <button className=\"btn-style\" onClick={SqMeterHandler}>Brick Calculation by SquareMeter</button><br/><br/>\n      {isPreviewShown1 && <SqFt />}\n      {isPreviewShown2 && <CubicFeet />}\n      {isPreviewShown4 && <CubicMeter />}\n      {isPreviewShown3 && <SquareMeter />}\n    </div> \n  )\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}